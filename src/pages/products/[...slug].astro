---
// src/pages/products/[...slug].astro

import PayButton from "@/components/webpay/PayButton";
import ProductSlideshow from "@/components/products/ProductSlideshow.astro";
import MainLayout from "@/layouts/MainLayout.astro";
import {actions} from 'astro:actions';  
import Talla from "@/components/Frontend/Talla.astro";

const {slug}=Astro.params;

const {data,error} = await actions.getProductsBySlug.safe(slug ?? '')
if (error) {
    return Astro.redirect('/404')
}

const { product, images } = data;

const image = images[0].image.startsWith('http')
  ? images[0].image
  : `${import.meta.env.PUBLIC_URL}/images/products/${images[0].image}`;
---

<MainLayout

  title={product.title}
  description={product.description}
  image={image}
    >
    <main class="container m-auto max-w-4xl px-5 mt-8">
    <!-- image={image} -->
  <!-- <h1 class="text-pink-300">{product.title}</h1> -->
  <main class="container m-auto max-w-4xl px-5 mt-8">

  <div class="grid grid-cols-1 md:grid-cols-3 w-full gap-4">
    <ProductSlideshow images={images.map((i) => i.image)} />
    <section>
      <h2 class="text-2xl font-bold text-[#231f20]">{product.title}</h2>
      <h2 class="font-bold text-[#231f20]">${product.price}</h2>
        <!-- Colores disponibles -->
        <h3 class="mt-5 text-[#231f20]">Colores disponibles</h3>
        <div class="flex flex-wrap gap-4">
          {
            product.colors
              .split(',')
              .map((color) => (
                <button
                  type="button"
                  class="btn-color w-10 h-10 rounded-full border cursor-pointer border-gray-300 hover:border-gray-500 transition-all"
                  style={`background-color: ${color};`}
                  onclick="this.classList.toggle('active-color')" 
                  aria-label={color}
                  title={color} 
                  data-color={color}
                >
                  <span class="sr-only">{color}</span> <!-- Ocultamos el nombre del color para accesibilidad -->
                </button>
              ))
          }
        </div>
        <h3 class="mt-5 text-[#231f20]">Tallas disponibles</h3>
<ul class="flex gap-3 text-[#231f20]">
  {
    product.sizes
      .split(',')
      .map((size) => (
        <li 
          class="li-size"
          data-size={size}
        >
          {size}
        </li>
      ))
  }
</ul>
<!-- componente de talla -->
<Talla/>
      <!-- <h3 class="mt-5 te xt-pink-300">Cantidad disponible</h3>
      <div>
        <button class="btn-quantity text-pink-300">-</button>
        <input type="number" min="1" value="1" />
        <button class="btn-quantity text-pink-300">+</button>
      </div> -->

      <button class=" bg-[#d5d6c3] hover:bg-[#231f20] text-black hover:text-[#d5d6c3] font-bold py-2 px-4 mt-4 border transition duration-200 ease-in-out w-full rounded-xl snipcart-add-item"
      data-item-id={data.product.id}
      data-item-categories={data.product.gender}
      data-item-name={data.product.title}
      data-item-price={data.product.price}
      data-item-custom1-name="Talla"
      data-item-custom1-options={product.sizes.split(',').join('|')} 
      data-item-custom1-value=""

      data-item-custom2-name="Colores disponibles"
      data-item-custom2-value=""
      data-item-custom2-options={product.colors.split(',').join('|')}
  >   
      Añadir al carrito
  </button>
  <PayButton amount={product.price} client:load />

      <h3 class="mt-10 text-[#231f20]">Descripción</h3>
      <p class="ttext-[#231f20]">{product.description}</p>
    </section>
  </div>

  <input type="hidden" id="product-id" value={product.id} />
</main>
</MainLayout>

<script>
  import { CartCookiesClient } from '@/utils';
  import { itemsInCart } from '@/store';
  import { navigate } from 'astro:transitions/client';

  document.addEventListener('astro:page-load', () => {
    // const sizeElements = document.querySelectorAll('li');

    //sizeElements.forEach((liElement) => {
      //liElement.addEventListener('click', () => {
        //sizeElements.forEach((s) => s.classList.remove('selected-size'));
        //liElement.classList.add('selected-size');
      //});
   // });

    const quantityInput = document.querySelector('input') as HTMLInputElement;
    const productIdInput = document.querySelector(
      '#product-id'
    ) as HTMLInputElement;

    let quantity = 1;

    const [decrementButton, incrementButton, addToCardButton] =
      document.querySelectorAll('button');

    if (!incrementButton || !quantityInput) return;

    incrementButton.addEventListener('click', () => {
      quantity = Math.min(quantity + 1, 5);
      quantityInput.value = quantity.toString();
    });

    decrementButton.addEventListener('click', () => {
      quantity = Math.max(quantity - 1, 1);
      quantityInput.value = quantity.toString();
    });

    // addToCardButton.addEventListener('click', async () => {
    //   const size = document.querySelector('.selected-size')?.textContent;
    //   if (!size) {
    //     return alert('Seleccione una talla');
    //   }

    //   addToCardButton.disabled = true;

    //   const cart = CartCookiesClient.addItem({
    //     productId: productIdInput.value,
    //     size: size,
    //     quantity: quantity,
    //   });

    //   itemsInCart.set(cart.length);

    //   // TODO: cambiar luego cuando tengamos los ViewTransitions
    //   // window.location.href = '/cart';
    //   await navigate('/#/cart');
    // });
  });
</script>

<style>
  /* Estilo para los <li> que muestran las tallas */
.li-size {
  @apply text-base py-2 px-4 rounded-lg border bg-[#d5d6c3] border-gray-300 text-[#6d686e] transition-all duration-200 ease-in-out;
}

/* Estado hover */
.li-size:hover {
  @apply bg-[#231f20] text-white border-[#231f20];
}
  /* Estilo para los botones de talla */
.btn-size {
  @apply text-base py-2 px-4 rounded-lg border border-gray-300 text-[#6d686e] transition-all duration-200 ease-in-out;
}

/* Estado hover y activo */
.btn-size:hover {
  @apply bg-[#231f20] text-white border-[#231f20];
}

.active {
  @apply bg-[#231f20] text-white border-[#231f20];
}

/* Efecto de borde al seleccionar */
.btn-size:focus,
.btn-size.active {
  @apply ring-2 ring-[#231f20] outline-none;
}
  h3 {
    @apply font-bold;
  }

  li {
    @apply hover:underline cursor-pointer;
  }

  .selected-size {
    @apply text-blue-500 underline font-bold transition-all;
  }

  .btn-quantity {
    @apply w-10 text-center p-2 border border-gray-300 hover:bg-gray-100 cursor-pointer;
  }

  input {
    @apply w-16 text-center p-2 border border-gray-300;
  }

  input[type='number']::-webkit-outer-spin-button,
  input[type='number']::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  input[type='number'] {
    -moz-appearance: textfield; /* Para Firefox */
  }
</style>